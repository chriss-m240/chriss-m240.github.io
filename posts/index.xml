<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Visual Computing Course - Group site</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Visual Computing Course - Group site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>D3-Hugo integration task</title>
      <link>/posts/d3_hugo_integration_task/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/d3_hugo_integration_task/</guid>
      <description>Te following task is an example of how to add a D3 chart into the Hugo webpage by writting some JS code into the project. The JS code to this specific visualization can be found in the /static/js/chart.js file, where there are some variables and data declared for D3 to properly work and render.
In the case of the .md files there is only a few lines of HTML, defining the use of D3 via a CDN and referencing the JS script mecioned before.</description>
    </item>
    
    <item>
      <title>Lab 1, task 2. P5 - Convolution masks</title>
      <link>/posts/p5_convolution_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/p5_convolution_example/</guid>
      <description>Let&#39;s start understanding a little bit about convolutional masks, also known as kernels. It&#39;s a concept normally used in visual computing because it refers to a matrix where some values are defined to achieve certain effect over images or videos. The most common convolutional mask is the blur kernel used to soften an image and create a foggy or a fade effect, here it is what is know as a box blur kernel, characteristic because it defines that the color for a pixel is the arithmetic mean of its neighboring pixels.</description>
    </item>
    
    <item>
      <title>P5 optical illusion example</title>
      <link>/posts/p5_optical_illusion_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/p5_optical_illusion_example/</guid>
      <description>The following illusion is called Café Wall, it consists of simple elements as it is some black and white squares displayed inside parallel rows tricking our eyes to see not parallel rows as it actually is but evidencing a few slopped squares especially at the ends or sides of the rows. Here is part of the code used to make this visualization:
function draw() { groutWidth = 139 / 25; background(&#39;#444444*2&#39;); numRows = ceil(1000 / (sqWidth)) + 1; for (let i = 0; i &amp;lt; numRows; i = i + 1) { line(0, i * sqWidth, 480, i * sqWidth); drawRow(i); } }    The following illusion is called Café Wall, it consists of simple elements as it is some black and white squares displayed inside parallel rows tricking our eyes to see not parallel rows as it actually is but evidencing a few slopped squares especially at the ends or sides of the rows.</description>
    </item>
    
  </channel>
</rss>
